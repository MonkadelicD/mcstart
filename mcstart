#!/bin/bash 

# Enable debugging
#set -x
#echo $PWD

# Declare variables

# Get OS info
# Get OS info to determine package manager
if [ -e /etc/os-release ]; then
  source /etc/os-release;
fi
if [[ "$ID" == "ubuntu" ]] || [[ "$ID" == "debian" ]] || [[ "$ID" == "linuxmint" ]]; then
  pkg_mngr="apt"
elif [[ "$ID" == "fedora" ]] || [[ "$ID" == "rhel" ]] || [[ "$ID" == "rocky" ]]; then
  pkg_mngr="dnf"
else
  echo "Untested OS. Please verify and improve this script."
  exit 1
fi

# get CPu architecture for java in Ubuntu
if [ "$(arch)" = aarch64 ]; then
  arch=arm64
else
  arch=amd64
fi

# Set variable for each java version needed
if [[ "$ID" == "ubuntu" ]] || [[ "$ID" == "debian" ]] || [[ "$ID" == "linuxmint" ]]; then
  java8=/usr/lib/jvm/java-8-openjdk-"$arch"/jre/bin/java
  java17=/usr/lib/jvm/java-17-openjdk-"$arch"/bin/java
  java21=/usr/lib/jvm/java-21-openjdk-"$arch"/bin/java
elif [[ "$ID" == "fedora" ]] || [[ "$ID" == "rhel" ]] || [[ "$ID" == "rocky" ]]; then
  java8=/usr/lib/jvm/jre-1.8.0/bin/java
  java17=/usr/lib/jvm/jre-17/bin/java
  java21=/usr/lib/jvm/jre-21/bin/java
else
  echo "Untested OS. Please verify and improve this script."
  exit 1
fi

# Get Minecraft server software and version from first and second CLI options 
cd "$HOME" || ( echo "Could not change to $HOME"; exit )
#echo $PWD
mcSrvrType="$1" 

# Check and set input variables if valid selections
if [[ -e "$mcSrvrType"/"$2" && -d "$mcSrvrType"/"$2" ]];
then
	echo "Found $mcSrvrType-$2"
	srvrDir="$HOME"/"$mcSrvrType"/"$2"
	linkTarget=$(readlink -f "$1"/"$2")
	buildVersion=$(basename "$linkTarget")
	gameDir="$2"
elif ! "$1";
then
	echo "MC server type not valid at first option"
	help
elif ! "$2";
then
	echo "MC server version not valid at second option"
	help
fi

# Get MC server minor version for java compatibilty
IFS=. read major minor point <<< "$buildVersion"
if [[ "$minor" -lt 17 ]];
then
	javabin="$java8"
elif [[ "$minor" -ge 20 ]] && [[ "$point" -ge 4 ]]; then
  javabin="$java21"
else
	javabin="$java17"
fi

# Get configured port for MC server and echo to console
srvrPort=$(grep "server-port" "$srvrDir"/server.properties | awk -F = '{ print $2 }')

# Help/Usage

help()
{
	# Display help/usage
	echo "This script requires at least a server type to be specified."
	echo "A build version can also be specified as the second option."
	echo
	echo "Syntax: startmc.sh [servertype] [version]"
	echo
}

# Main program

# Ensure tmux is installed
if [[ ! -x /usr/bin/tmux ]]; then
  # install wtih apt or dnf
  if [ "$pkg_mngr" == apt ]; then
    run_apt tmux 
  elif [ "$pkg_mngr" == dnf ]; then
    run_dnf tmux
  fi
fi

# Change to directory selected version is located in. 
cd "$srvrDir" || ( echo "Could not change to $srvrDir"; exit )
#echo $PWD

# Java command to start MC server in a screen session. 
if [[ "$mcSrvrType" == forge ]];
then
	echo "Starting ${mcSrvrType}-${buildVersion} on Port: $srvrPort"
	# screen -d -m -S "MCServer_$mcSrvrType-$buildVersion" $srvrDir/run.sh
  # Using tmux now. Starting with Rocky Linux 8 screen was dropped
  tmux new-session -d -s "MCServer_${mcSrvrType}" -n "MCServer_${mcSrvrType}-${buildVersion}" "$srvrDir"/run.sh
	
else
	echo "Starting $mcSrvrType-$buildVersion on Port: $srvrPort"
	# screen -d -m -S "MCServer_$mcSrvrType-$buildVersion" $javabin -Xms1G -Xmx4G -jar $mcSrvrType-$buildVersion.jar nogui
  # Using tmux now. Starting with Rocky Linux 8 screen was dropped
  tmux new-session -d -s "MCServer_${mcSrvrType}" -n "MCServer_${mcSrvrType}-${buildVersion}" "$javabin" -Xms1G -Xmx4G -jar "${mcSrvrType}"-"${buildVersion}".jar nogui
fi
